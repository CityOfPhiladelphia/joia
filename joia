#!/bin/bash
#
# joia deploys an app to an instance on AWS

conf=".joia.sh"

# Override environment if there's a .env
[ -f ".env" ] && source ".env"

# Defaults
[ ! "$AMI" ] && AMI=ami-d05e75b8 # ubuntu 14.04
[ ! "$APP_DIR" ] && APP_DIR=app
[ ! "$INSTANCE_TYPE" ] && INSTANCE_TYPE=t2.micro
[ ! "$INSTANCE_USER" ] && INSTANCE_USER=ubuntu

#
# Helper functions

instance_check () {
  [ ! "$INSTANCE" ] && echo "No reference found for INSTANCE" && exit 1
}

update_env () {
  # Replace value if ed exists and var in file
  hash ed 2>/dev/null && ed_out="$(ed -s .env <<EOF
g/$1=/s/=.*/=$2
w
EOF
)"

  # Otherwise just append the var to the file
  [ ! "$ed_out" ] && echo "$1=$2" >> .env
}

#
# Command functions

joia_deploy () {
  echo "A joia_deploy function must be defined in $conf"
}

joia_down () {
  read -p "Terminate instance $INSTANCE? (Enter \"y\" to proceed.) " terminate_yes
  [ ! "$terminate_yes" = "y" ] && exit 0

  aws ec2 terminate-instances --instance-id="$INSTANCE"

  update_env "INSTANCE" ""
}

joia_host () {
  echo "Getting hostname"
  DOMAIN=$(aws ec2 describe-instances --instance-id="$INSTANCE" | grep "^INSTANCES" | cut -f14)

  if [ ! "$DOMAIN" ]; then
    >&2 echo "No hostname returned for $INSTANCE"
    return 1
  fi

  update_env "DOMAIN" "$DOMAIN"
  ssh-keyscan "$DOMAIN" >> ~/.ssh/known_hosts 2> /dev/null
}

joia_install () {
  echo "A joia_install function must be defined in $conf"
}

joia_pull () {
  rsync -e "ssh -i $HOME/.ssh/$KEY_PAIR.pem" -zrptui --delete --exclude=".git" "$INSTANCE_USER@$DOMAIN:$APP_DIR/" ./
}

joia_push () {
  rsync -e "ssh -i $HOME/.ssh/$KEY_PAIR.pem" -zrptui --delete --exclude=".git" ./ "$INSTANCE_USER@$DOMAIN:$APP_DIR/"
}

joia_ssh () {
  cmd="$1"
  [ "$cmd" ] || cmd="bash --login"
  ssh -i "$HOME/.ssh/$KEY_PAIR.pem" "$INSTANCE_USER@$DOMAIN" -t "cd $APP_DIR; $cmd"
}

joia_sync () {
  unison -terse -batch -prefer newer -ignore "Path .git" -sshargs "-i $HOME/.ssh/$KEY_PAIR.pem" . "ssh://$INSTANCE_USER@$DOMAIN/$APP_DIR"
}

joia_up () {
  if [ "$INSTANCE" ]; then
    echo "Existing reference found: INSTANCE=$INSTANCE"
    read -p "Spin up new instance and replace reference? (Enter \"y\" to proceed.) " ref_replace
    [ ! "$ref_replace" = "y" ] && exit 0
  fi

  echo "Provisioning instance"
  INSTANCE=$(aws ec2 run-instances --key-name "$KEY_PAIR" --instance-type "$INSTANCE_TYPE" \
    --associate-public-ip-address --image-id "$AMI" --subnet-id "$SUBNET" | \
    grep "^INSTANCES" | cut -f8)

  if [ "$INSTANCE_NAME" ]; then
    echo "Tagging instance"
    aws ec2 create-tags --resources "$INSTANCE" --tags "Key=Name,Value=$INSTANCE_NAME"
  fi

  update_env "INSTANCE" "$INSTANCE"

  echo -n "Waiting for instance $INSTANCE to come online. This may take a few minutes"
  while true; do
    sleep 5
    echo -n "."
    reachability=$(aws ec2 describe-instance-status --instance-id="$INSTANCE" | grep reachability | head -n1 | cut -f3)
    [ "$reachability" = "passed" ] && break
  done
  echo

  joia_host
  joia_push
  joia_install
  joia_deploy

  echo "Sync and deploy on changes with \"joia watch\""
}

joia_watch () {
  echo "Syncing and deploying on file changes"
  while true; do
    # Only run deploy on output from sync
    # (since files have been updated on the instance)
    sync_out="$(joia_sync 2>&1)"

    # If sync errors (maybe due to lack of unison) try push
    [ $? -ne 0 ] && sync_out="$(joia_push 2>&1)"

    if [ "$sync_out" ]; then
      echo "$sync_out"
      joia_deploy
    fi
    sleep 5
  done
}

# Overwrite functions with those defined in $conf
[ -f "$conf" ] && source "$conf"

case "$1" in
  deploy)
    instance_check
    joia_deploy
    ;;
  down)
    instance_check
    joia_down
    ;;
  host)
    instance_check
    joia_host
    ;;
  install)
    instance_check
    joia_install
    ;;
  pull)
    instance_check
    joia_pull
    ;;
  push)
    instance_check
    joia_push
    ;;
  ssh)
    instance_check
    shift
    joia_ssh "$@"
    ;;
  sync)
    instance_check
    joia_sync
    ;;
  up)
    # instance check handled in joia_up
    joia_up
    ;;
  watch)
    instance_check
    joia_watch
    ;;
  *)
    cat <<EOF
usage: joia <command>

commands:
  deploy    deploy app on instance
  down      destroy instance
  host      set up ssh host config for an instance
  install   install app stack on instance
  push      push files to instance
  pull      pull files from instance
  ssh       ssh into instance
  sync      sync files with instance
  up        spin instance up
  watch     sync and deploy on file changes
EOF
    exit 1
esac
