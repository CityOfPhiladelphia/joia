#!/bin/bash
#
# joia deploys an app to an instance on AWS

# Global vars in ~/.joiarc
[ -f "$HOME/.joiarc" ] && source "$HOME/.joiarc"

# App-specific in .env
[ -f ".env" ] && source ".env"

# Defaults
[ ! "$AMI" ] && AMI=ami-fce3c696 # ubuntu 14.04
[ ! "$APP_DIR" ] && APP_DIR=app
[ ! "$DEPLOY_SCRIPT" ] && DEPLOY_SCRIPT=scripts/deploy.sh
[ ! "$INSTALL_SCRIPT" ] && INSTALL_SCRIPT=scripts/install.sh
[ ! "$INSTANCE_TYPE" ] && INSTANCE_TYPE=t2.nano
[ ! "$INSTANCE_USER" ] && INSTANCE_USER=ubuntu

#
# Helper functions

instance_check () {
  [ ! "$INSTANCE_ID" ] && echo "No reference found for INSTANCE_ID" && exit 1
}

update_env () {
  # Replace value if ed exists and var in file
  hash ed 2>/dev/null && ed_out="$(ed -s .env <<EOF
g/^$1=/s/=.*/=$2
w
EOF
)"

  # Otherwise just append the var to the file
  [ ! "$ed_out" ] && echo "$1=$2" >> .env
}

#
# Command functions

joia_deploy () {
  joia_ssh "$DEPLOY_SCRIPT"
}

joia_down () {
  read -p "Terminate instance $INSTANCE_ID? (Enter \"y\" to proceed.) " terminate_yes
  [ ! "$terminate_yes" = "y" ] && exit 0

  echo "Instance $INSTANCE_ID terminating"
  aws ec2 terminate-instances --instance-ids "$INSTANCE_ID" > /dev/null

  update_env "INSTANCE_ID" ""
  update_env "INSTANCE_HOSTNAME" ""
}

joia_env () {
  if [ ! -f ".env" ]; then
    echo 'No .env to sync'
    return
  fi

  echo 'Syncing .env to ~/.ssh/environment on instance'
  rsync -e "ssh -i $HOME/.ssh/$KEYPAIR.pem" .env "$INSTANCE_USER@$INSTANCE_HOSTNAME:.ssh/environment"

  joia_ssh "
    if grep -q '^PermitUserEnvironment yes' /etc/ssh/sshd_config; then
      echo 'User environment already permitted for ssh'
    else
      echo 'Permitting user env for ssh'
      echo -e '\\nPermitUserEnvironment yes' | sudo tee -a /etc/ssh/sshd_config > /dev/null
      sudo service ssh restart
    fi
  "
}

joia_host () {
  echo "Getting hostname"
  INSTANCE_HOSTNAME=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" \
    --query 'Reservations[0].Instances[0].PublicDnsName' | tr -d '"')

  if [ ! "$INSTANCE_HOSTNAME" ]; then
    >&2 echo "No hostname returned for $INSTANCE_ID"
    return 1
  fi

  update_env "INSTANCE_HOSTNAME" "$INSTANCE_HOSTNAME"
  ssh-keyscan "$INSTANCE_HOSTNAME" >> ~/.ssh/known_hosts 2> /dev/null
}

joia_install () {
  joia_ssh "$INSTALL_SCRIPT"
}

joia_pull () {
  rsync -e "ssh -i $HOME/.ssh/$KEYPAIR.pem" -zrpci --delete --exclude=".*" "$INSTANCE_USER@$INSTANCE_HOSTNAME:$APP_DIR/" ./
}

joia_push () {
  rsync -e "ssh -i $HOME/.ssh/$KEYPAIR.pem" -zrpci --delete --exclude=".*" ./ "$INSTANCE_USER@$INSTANCE_HOSTNAME:$APP_DIR/"
}

joia_ssh () {
  cmd="$1"
  [ "$cmd" ] || cmd="bash --login"
  ssh -i "$HOME/.ssh/$KEYPAIR.pem" "$INSTANCE_USER@$INSTANCE_HOSTNAME" -t "cd $APP_DIR; $cmd"
}

joia_sync () {
  unison -terse -batch -prefer newer -ignore "Name .*" -sshargs "-i $HOME/.ssh/$KEYPAIR.pem" . "ssh://$INSTANCE_USER@$INSTANCE_HOSTNAME/$APP_DIR"
}

joia_up () {
  if [ "$INSTANCE_ID" ]; then
    echo "Existing reference found: INSTANCE_ID=$INSTANCE_ID"
    read -p "Spin up new instance and replace reference? (Enter \"y\" to proceed.) " ref_replace
    [ ! "$ref_replace" = "y" ] && exit 0
  fi

  if [ ! "$KEYPAIR" ]; then
    echo "Please specify KEYPAIR"
    exit 1
  fi

  if [ ! "$SUBNET" ]; then
    echo "Please specify SUBNET"
    exit 1
  fi

  echo "Provisioning instance"
  INSTANCE_ID=$(aws ec2 run-instances --key-name "$KEYPAIR" --instance-type "$INSTANCE_TYPE" \
    --associate-public-ip-address --image-id "$AMI" --subnet-id "$SUBNET" \
    --query 'Instances[0].InstanceId' | tr -d '"')

  if [ "$INSTANCE_NAME" ]; then
    echo "Tagging instance"
    aws ec2 create-tags --resources "$INSTANCE_ID" --tags "Key=Name,Value=$INSTANCE_NAME"
  fi

  update_env "INSTANCE_ID" "$INSTANCE_ID"

  echo "Waiting for instance $INSTANCE_ID to come online (this may take a few minutes)"
  aws ec2 wait instance-status-ok --instance-ids "$INSTANCE_ID"

  joia_host
  joia_push
  joia_env
  joia_install
  joia_deploy

  echo "Sync and deploy on changes with \"joia watch\""
}

joia_watch () {
  echo "Syncing and deploying on file changes"
  sync_cmd="joia_sync"
  sync_out="$($sync_cmd 2>&1)"

  # If sync errors (maybe due to lack of unison) try push
  if [ $? -ne 0 ]; then
    echo "Error running sync, falling back to push"
    sync_cmd="joia_push"
    sync_out="$($sync_cmd 2>&1)"
  fi

  while true; do
    if [ "$sync_out" ]; then
      echo "$sync_out"
      joia_deploy
    fi

    sleep 5

    # Only run deploy on output from sync
    # (since files have been updated on the instance)
    sync_out="$($sync_cmd 2>&1)"
  done
}

case "$1" in
  deploy)
    instance_check
    joia_deploy
    ;;
  down)
    instance_check
    joia_down
    ;;
  env)
    instance_check
    joia_env
    ;;
  host)
    instance_check
    joia_host
    ;;
  install)
    instance_check
    joia_install
    ;;
  pull)
    instance_check
    joia_pull
    ;;
  push)
    instance_check
    joia_push
    ;;
  ssh)
    instance_check
    shift
    joia_ssh "$@"
    ;;
  sync)
    instance_check
    joia_sync
    ;;
  up)
    # instance check handled in joia_up
    joia_up
    ;;
  watch)
    instance_check
    joia_watch
    ;;
  *)
    cat <<EOF
usage: joia <command>

commands:
  deploy    deploy app on instance
  down      destroy instance
  env       set environment on instance
  host      set up ssh host config for an instance
  install   install app stack on instance
  push      push files to instance
  pull      pull files from instance
  ssh       ssh into instance
  sync      sync files with instance
  up        spin instance up
  watch     sync and deploy on file changes
EOF
    exit 1
esac
