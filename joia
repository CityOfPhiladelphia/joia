#!/bin/bash
#
# joia deploys an app to an instance on AWS

conf=".joia.sh"
joia_dir=".joia"
joia_env="$joia_dir/env"
ssh_dir="$joia_dir/ssh"
ssh_conf="$ssh_dir/config"
ssh_hosts="$ssh_dir/known_hosts"

mkdir -p "$ssh_dir"

[ -f "$joia_env" ] && source "$joia_env"
[ -f ".env" ] && source ".env"

# Defaults
[ ! "$JOIA_APP_DIR" ] && JOIA_APP_DIR=app
[ ! "$JOIA_USER" ] && JOIA_USER=ubuntu
[ ! "$JOIA_NAME" ] && JOIA_NAME=joia
[ ! "$JOIA_AMI" ] && JOIA_AMI=ami-d05e75b8 # ubuntu 14.04
[ ! "$JOIA_TYPE" ] && JOIA_TYPE=t2.micro

#
# Helper functions

instance_check () {
  [ ! "$JOIA_INSTANCE" ] && echo "No reference found for JOIA_INSTANCE" && exit 1
}

update_env () {
  # Replace value if var in file
  ed_out="$(ed -s $joia_env <<EOF
g/$1/s/=.*/=$2
w
EOF
)"

  # If the var wasn't already in the file add it
  [ ! "$ed_out" ] && echo $1=$2 >> $joia_env
}

#
# Command functions

joia_deploy () {
  echo "A joia_deploy function must be defined in $conf"
}

joia_down () {
  read -p "Terminate instance $JOIA_INSTANCE? (Enter \"y\" to proceed.) " terminate_yes
  [ ! "$terminate_yes" = "y" ] && exit 0

  aws ec2 terminate-instances --instance-id=$JOIA_INSTANCE

  update_env "JOIA_INSTANCE" ""
}

joia_host () {
  echo "Getting hostname"
  JOIA_HOSTNAME=`aws ec2 describe-instances --instance-id=$JOIA_INSTANCE | grep "^INSTANCES" | cut -f14`
  update_env "JOIA_HOSTNAME" $JOIA_HOSTNAME

  echo "Setting up ssh access"
  ssh-keyscan $JOIA_HOSTNAME >> "$ssh_hosts" 2> /dev/null
  cat >> "$ssh_conf" <<EOF
Host $JOIA_INSTANCE
    User $JOIA_USER
    HostName $JOIA_HOSTNAME
    IdentityFile ~/.ssh/$JOIA_KEY_PAIR.pem
    UserKnownHostsFile $ssh_hosts
EOF
}

joia_install () {
  echo "A joia_install function must be defined in $conf"
}

joia_pull () {
  rsync -e "ssh -F $ssh_conf" -zrptui --delete --exclude=".git" $JOIA_INSTANCE:$JOIA_APP_DIR/ ./
}

joia_push () {
  rsync -e "ssh -F $ssh_conf" -zrptui --delete --exclude=".git" ./ $JOIA_INSTANCE:$JOIA_APP_DIR/
}

joia_ssh () {
  cmd="$1"
  [ "$cmd" ] || cmd="bash --login"
  ssh -F "$ssh_conf" $JOIA_INSTANCE -t "cd $JOIA_APP_DIR; $cmd"
}

joia_up () {
  if [ "$JOIA_INSTANCE" ]; then
    echo "Existing reference found: JOIA_INSTANCE=$JOIA_INSTANCE"
    read -p "Spin up new instance and replace reference? (Enter \"y\" to proceed.) " ref_replace
    [ ! "$ref_replace" = "y" ] && exit 0
  fi

  echo "Provisioning instance"
  JOIA_INSTANCE=`aws ec2 run-instances --key-name $JOIA_KEY_PAIR --instance-type $JOIA_TYPE \
    --associate-public-ip-address --image-id $JOIA_AMI --subnet-id $JOIA_SUBNET | \
    grep "^INSTANCES" | cut -f8`

  echo "Tagging instance"
  aws ec2 create-tags --resources $JOIA_INSTANCE --tags Key=Name,Value=$JOIA_NAME

  update_env "JOIA_INSTANCE" $JOIA_INSTANCE

  echo -n "Waiting for instance $JOIA_INSTANCE to come online. This may take a few minutes"
  while true; do
    sleep 5
    echo -n "."
    reachability=`aws ec2 describe-instance-status --instance-id=$JOIA_INSTANCE | grep reachability | head -n1 | cut -f3`
    [ "$reachability" = "passed" ] && break
  done
  echo

  joia_host
  joia_push
  joia_install
  joia_deploy

  echo "Sync and deploy on changes with \"joia watch\""
}

joia_watch () {
  echo "Syncing and deploying on file changes"
  while true; do
    # Only run deploy on output from push
    # (since files have been updated on the instance)
    push_out="`joia_push`"
    if [ "$push_out" ]; then
      echo "$push_out"
      joia_deploy
    fi
    sleep 5
  done
}

# Overwrite functions with those defined in $conf
[ -f "$conf" ] && source "$conf"

case "$1" in
  deploy)
    instance_check
    joia_deploy
    ;;
  down)
    instance_check
    joia_down
    ;;
  host)
    instance_check
    joia_host
    ;;
  install)
    instance_check
    joia_install
    ;;
  pull)
    instance_check
    joia_pull
    ;;
  push)
    instance_check
    joia_push
    ;;
  ssh)
    instance_check
    shift
    joia_ssh "$@"
    ;;
  up)
    # instance check handled in joia_up
    joia_up
    ;;
  watch)
    instance_check
    joia_watch
    ;;
  *)
    cat <<EOF
usage: joia <command>

commands:
  deploy    deploy app on instance
  down      destroy instance
  host      set up ssh host config for an instance
  install   install app stack on instance
  pull      pull file updates from instance
  push      push file updates to instance
  ssh       ssh into instance
  up        spin instance up
  watch     push and deploy on file changes
EOF
    exit 1
esac
